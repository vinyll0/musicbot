import logging
import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)
import yt_dlp
import lyricsgenius

TELEGRAM_BOT_TOKEN = "7619265642:AAG0ZdY94aNea2f4RLcy2Ubmw6qzgVx5dXQ"
GENIUS_ACCESS_TOKEN = "5j1P1reu89Ii5lr94MBbrZwlVyTqQ3d8SEp3L6kdDm8E_ZbWUHFnjL7LNRNoTZmf"

FFMPEG_PATH = "ffmpeg"  # –¥–ª—è Railway / Linux
DOWNLOAD_DIR = "downloads"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

genius = lyricsgenius.Genius(GENIUS_ACCESS_TOKEN, verbose=False, remove_section_headers=True)


def find_lyrics(song_title, artist):
    """–ò—â–µ—Ç —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–∞ Genius.com."""
    try:
        cleaned_title = re.sub(r'\(.*?\)|\[.*?\]|ft\..*|feat\..*', '', song_title, flags=re.IGNORECASE).strip()
        logger.info(f"–ò—â—É —Ç–µ–∫—Å—Ç –¥–ª—è: '{cleaned_title}' –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è '{artist}'")
        song = genius.search_song(cleaned_title, artist)
        if song:
            return song.lyrics.replace(f"{song.title} Lyrics", "").strip()
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏ —è –Ω–∞–π–¥—É –µ—ë –¥–ª—è —Ç–µ–±—è, –∞ —Ç–∞–∫–∂–µ —Å–º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –µ—ë —Ç–µ–∫—Å—Ç!"
    )


async def handle_song_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.message.text
    message = await update.message.reply_text("üîé –ò—â—É –ø–µ—Å–Ω—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    try:
        ydl_opts = {'format': 'bestaudio/best', 'noplaylist': True, 'quiet': True, 'extract_flat': True}
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            search_query = f"ytsearch5:{query}"
            info = ydl.extract_info(search_query, download=False)

            if not info or not info.get('entries'):
                await message.edit_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                return

            keyboard = []
            if 'search_results' not in context.chat_data:
                context.chat_data['search_results'] = {}

            for item in info['entries']:
                video_id = item['id']
                title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                context.chat_data['search_results'][video_id] = {
                    'title': title,
                    'artist': item.get('uploader', '')
                }

                button_title = title[:50] + "..." if len(title) > 50 else title
                keyboard.append([InlineKeyboardButton(button_title, callback_data=f"dl_{video_id}")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            await message.edit_text('–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:', reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ '{query}': {e}")
        await message.edit_text("üò• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞.")


async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    action, data = query.data.split('_', 1)

    if action == 'dl':
        chat_id = query.message.chat_id
        await query.message.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–µ–∫...")
        await download_and_send_song(chat_id, data, context, query.message)

    elif action == 'lyrics':
        video_id = data
        song_info = context.chat_data.get('search_results', {}).get(video_id)

        if not song_info:
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Å–Ω–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é –∑–∞–Ω–æ–≤–æ.")
            return

        await query.edit_message_reply_markup(None)
        await query.answer("–ò—â—É —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏...")

        lyrics = find_lyrics(song_info['title'], song_info['artist'])
        if lyrics:
            for i in range(0, len(lyrics), 4096):
                await query.message.reply_text(lyrics[i:i + 4096])
        else:
            await query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–π –ø–µ—Å–Ω–∏.")


async def download_and_send_song(chat_id: int, video_id: str, context: ContextTypes.DEFAULT_TYPE, message_to_edit) -> None:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø–µ—Å–Ω—é —Å YouTube, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ mp3 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç'."""
    downloaded_file_path = ""
    try:
        ydl_opts = {
            'ffmpeg_location': FFMPEG_PATH,
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192'
            }],
            'outtmpl': os.path.join(DOWNLOAD_DIR, f'{chat_id}_{video_id}.%(ext)s'),
            'noplaylist': True,
            'quiet': True,
        }

        video_url = f"https://www.youtube.com/watch?v={video_id}"
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(video_url, download=True)
            downloaded_file_path = ydl.prepare_filename(info_dict).rsplit('.', 1)[0] + '.mp3'

        if not os.path.exists(downloaded_file_path):
            raise FileNotFoundError("–°–∫–∞—á–∞–Ω–Ω—ã–π mp3 —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        await message_to_edit.edit_text("üéß –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–µ–∫...")

        keyboard = [[InlineKeyboardButton("üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"lyrics_{video_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        with open(downloaded_file_path, 'rb') as audio_file:
            await context.bot.send_audio(
                chat_id=chat_id,
                audio=audio_file,
                title=info_dict.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                performer=info_dict.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'),
                duration=info_dict.get('duration', 0),
                reply_markup=reply_markup
            )

        await message_to_edit.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ (ID: {video_id}): {e}")
        await message_to_edit.edit_text("üò• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫.")

    finally:
        if downloaded_file_path and os.path.exists(downloaded_file_path):
            os.remove(downloaded_file_path)


def main() -> None:
    if not os.path.exists(DOWNLOAD_DIR):
        os.makedirs(DOWNLOAD_DIR)

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("stpart", start))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_song_request))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
